name: Release Binary and .deb (Debian Build)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build_on_debian:
    runs-on: ubuntu-latest

    container:
      image: debian:bullseye # Or debian:bookworm

    steps:
      - name: Install prerequisites in container
        run: |
          apt-get update
          # Add ca-certificates here!
          # git is also explicitly added to ensure it's available before checkout if needed
          apt-get install -y --no-install-recommends \
            ca-certificates \
            git \
            curl \
            build-essential \
            pkg-config \
            libssl-dev
          # Optional: Clean up apt cache to reduce layer size, not critical for functionality
          # apt-get clean && rm -rf /var/lib/apt/lists/*

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build binary
        run: cargo build --release

      - name: Build .deb package
        run: cargo deb

      - name: Verify .deb package and binary
        run: |
          echo "--- Contents of target/release ---"
          ls -l target/release/
          echo "--- Contents of target/debian ---"
          ls -l target/debian/
          echo "--- Checking GLIBC dependencies of the binary ---"
          # Use objdump as ldd might not be available or might act differently in some minimal containers for static binaries
          # If your binary is dynamically linked, ldd is fine.
          # objdump -p target/release/custom-ospf | grep GLIBC || echo "GLIBC strings not found or objdump error"
          ldd target/release/custom-ospf || echo "ldd command failed or binary is static"

      - name: Upload binary and .deb to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/release/custom-ospf
            target/debian/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
